var net = require('net');
var fs = require('fs');
var async = require('async');

var clients = new Array();


//----------------LOGFILE STUFF, DO NOT WORRY ABOUT THIS ------//
//create a logfilefolder for the current date
var date = new Date().toLocaleDateString();
var folderName ="./TraditionalLogFiles/"+date;

if (fs.existsSync(folderName)) {
    // Dir exists, dont do anything
}
else{
	fs.mkdirSync(folderName);
}


//logfile
var date = new Date();
var logFileName = folderName+"/TraditionalSvrLog"+date.toLocaleTimeString()+".csv";


//----------------END LOGFILE STUFF, DO NOT WORRY ABOUT THIS ------//



// -- START THE SERVER AND PRINT OUT WHAT THE LISTENING IP IS  --//

//Create the server and listen on port 8000
var server = net.createServer().listen(8000);

//Code to get IP address:
var os = require('os');

var interfaces = os.networkInterfaces();
var addresses = [];
for (var k in interfaces) {
    for (var k2 in interfaces[k]) {
        var address = interfaces[k][k2];
        if (address.family === 'IPv4' && !address.internal) {
            addresses.push(address.address);
        }
    }
}


//Assuming the address is the first interface
console.log("Server has been started on " + addresses[0] + " on port " +server.address().port+"...");





/*

When a client connects, 
1) Check if it's BRAND NEW e.g. the program just started(the clients array is empty). If it is brand new, add to clients array.

2) Check if it's new, if it is, add to clients array. 

3) Check if it's old (if its already in clients array). If so, do nothing.

lastly
4) Print out the current number of connections recorded


*/

server.on("connection",function(socket){
	socket.UID = socket.remoteAddress+":"+socket.remotePort;
	console.log("A client has connected from " + socket.UID);
	
	/*
	*Check if the connecting socket is new. If so, add it to our array of clients. If it's not, don't do anything.
	*/
	//console.log("Before waterfall");
	async.waterfall([
		function(callback){
			checkIfNew(socket.UID,function(err,result){
				if(err) return console.log(err);
				//console.log("The result is "+result);
				//console.log("The result was!" +result);
				callback(null,result);
			})
		},
		//Handle based on whether they are a new client or not.
		function(result,callback){
			if(result == 1){
				console.log("NEW CLIENT!");
				//brand new client
				var client = new Object();
				client.address = socket.UID;
				client.records = new Array();
				client.connectionstatus=1;
				clients.push(client);

				//assign remote address to ip property
				
				//******************//
				socket.ip = socket.remoteAddress;


				callback(null,"NEW CLIENT: added to array");
				//console.log(clients);
			}
			else{
				console.log("EXISTING CLIENT!");
				callback(null,"EXISTING CLIENT: nothing added to array!");

			}
			//get the amount of connections that the server has right now.
		},function(msg,callback){
			server.getConnections(function(err,numSvrConnections){
				if(err) return console.log(err);
				callback(null,msg,numSvrConnections)
			})

		}
	],function(err,msg,numSvrConnections){
		console.log(msg);
		console.log("Number of clients in array= "+clients.length+"\n Number of connections registered with server= "+numSvrConnections);
	})





	socket.on('data',function(data){
		//Constraint 1: Store the list together with the number of requests generated by each client and the amount of data transffered to each client.
		

		async.waterfall([
			function(callback){
				getClientByUID(socket.UID,function(err,data){
					clientid = data;
					callback(null,clientid);
				})
			},
			function(clientid,callback){
				addRecord(clientid,data,function(err,data){
					if(err) return console.log(err);
					callback(null);	
				})
			}
			],
			function(err){
				if(err) return console.log(err);
				socket.write(data.toString());
			})
		
	});

	socket.on('close',function(data){
		console.log("Client from " + socket.UID +" disconnected!");
		getClientByUID(socket.UID,function(err,clientid){
			if(err) return console.log(err);
			var cID = clientid;
			console.log("CID is "+clientid);
			setClientDisconnected(clientid,function(err,clientid){
				getConnectionsStatus();
			})
		})
		//console.log(socket);
	})

});


function checkIfNew(UID,callback){
	//console.log("Inside ceckIfNew")
	//If array is empty, obviously a new client
	if(clients.length < 1){
		//console.log("Start -New");
		callback(null,1);
	}
	else{
			for (var i = 0; i < clients.length; i++) {
			if(clients[i].address == UID){
				//Exists in array so an EXISTING CLIENT. 0 = NOT NEW
				//console.log("Exists");
				callback(null,0);
			}
		
		}
				//console.log("New");
				callback(null,1);
	}
		
	
}

function setClientDisconnected(clientid,callback){
	//console.log("client id is"+clientid);
	//console.log("This what clients looks like:");
	//console.log(clients);
	//console.log("with client id");
	//console.log(clients[clientid]);
	clients[clientid].connectionstatus=0;
	callback(null);
}

function getConnectionsStatus(callback){
	var connected = 0;
	var disconnected = 0;

	for (var i = 0; i < clients.length; i++) {
		if(clients[i].connectionstatus == 1){
			connected++;
		}
		else{
			disconnected++;
		}
	};

	console.log("USER DEFINED FN "+connected+"ACTIVE CONNECTIONS");
	console.log("USER DEFINED FN "+disconnected+"INACTIVE CONNECTIONS");
	server.getConnections(function(err,numSvrConnections){
		console.log("STACK DEFINED FN "+numSvrConnections+"ACTIVE CONNECTIONS");
		console.log("TOTAL CONNECTIONS EVER "+clients.length);
	})
}

function getClientByUID(UID,callback){
	var match = false;
	//console.log("GCBU INPUT: "+UID);
	for (var i = 0; i < clients.length; i++) {
		if(clients[i].address == UID){
			//console.log("MATCH!");
			match =true;
			callback(null,i);
		}
		else{
			//console.log("NO MATCH, UID: "+UID+"against"+clients[i].address);
		}
		
	};

	if(!match){
	callback("ERROR finding client by UID!!");
	}
}

function addRecord(clientid,data,callback){
	//Add record to array
	var record = new Object();
	record.dataSize = data.length;
	console.log("Data size is "+record.dataSize);
	clients[clientid].records.push(record);
	//console.log(clients[clientid].records);

	//Add record to logfile CLIENT,IP,ReqNum,NUM,Size,SIZE,Time,TIME
	var clientAddress = clients[clientid].address;
	var reqNum = clients[clientid].records.length;
	var totalTransferredSize = 0;

	for (var i = 0; i < clients[clientid].records.length; i++) {
		totalTransferredSize = totalTransferredSize + Number(clients[clientid].records[i].dataSize);
		console.log("Total is"+totalTransferredSize);
	};

	var timeStamp = new Date();
	var appendData = "Client,"+clientAddress+",RequestNumber,"+reqNum+",DataTransferred,"+totalTransferredSize+",Time,"+timeStamp.toLocaleTimeString()+"\n";
	fs.openSync(logFileName,'a');
	fs.appendFileSync(logFileName,appendData);

	callback(null,"record for client"+clientid+"and data size "+data.length+"added");
}



